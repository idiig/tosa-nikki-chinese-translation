#+title: 土佐日记多层次中译
#+author:  idiig, yamagen
#+date: 2025:09:10

[[https://doi.org/10.5281/zenodo.15563257][file:https://zenodo.org/badge/DOI/10.5281/zenodo.15563257.svg]]

#+begin_quote
[!IMPORTANT]
本项目 fork 自 [[https://github.com/yamagen/tosa-translation][yamagen/tosa-translation]]。
#+end_quote

* 简介
** 土佐日记
土佐日记是日本平安时代文学家纪贯之所著的一部日记体散文，成书于935年。
全书以第一人称视角，记录了作者一行人从土佐国（今高知县）回京的旅程及其
所见所感。
** 中译的背景与目标
- 中译本缺失 ::
  目前市面上已知不存在土佐日记的中文译本。
- 开源、透明、易纠错的译本 ::
  本项目旨在通过开源协作的方式，创建一个编辑过程透明，翻译模块透明的土
  佐日记的免费中译本。在翻译缺乏确认的情况下，可以细化到词表级别进行讨
  论和修正。且所有修正都作为提交记录保留，便于追溯和纠错。
- 直译与意译 ::
  翻译尽可能保留源语的语言学特征，不因为过度注重语言的流畅与优美破坏解
  读的可能性，因此项目区分提供：
  + 直译 :: 不顾忌中文句子通畅性，
  + 意译 :: 考虑到中文合法性的自然翻译
- 作为语言学资料的翻译 ::
  在翻译过程中查阅辞典是，我们发现，很多词的词义初出和唯一用例本身来自
  于土佐日记的解读，这时候词的意思往往形成了一种循环论证。对于仅出现土
  佐日记的、缺乏旁证词义的词，保持其词义的开放性，避免过度解释。最终，
  本项目基于基础词本位进行翻译，又基于翻译更新词义。形成一个语料本位的
  词表，为辞典学、语料库语言学、语料库语用学等研究提供资料。
- 带语言学标注的翻译文本 ::
  本项目同时基于Leipzig Gloss Rule和Zisk (2024)等语言学标注体系对每一
  个morpheme进行标注。同时给出非学术界读者也可以理解的解释，为跨语言的
  对比阅读提供便利。
- 教学用途 ::
  本项目自带的语言学标注和词表可以作为语言学、日语学习等课程的教学资料。
* 多层次中译
这个项目通过多层次的翻译方法，将原文的语言特征和尽可能保留在译文中。每
一条记录包含以下几个部分：
- 句子ID (=id=) :: 句子的唯一标识符
- 原文 (=koutei-yamagen=) :: 以校订原文和假名表示的日语原文
- 直译 (=translation-zh=) :: 逐词翻译，尽可能保留原文的语言特征
- 切片解释 (=phrase-gloss=) :: 对原文进行切片，并对每个切片进行解释
- 词语解释 (=word=) :: 对每个切片中的词语进行逐词解释与标注
- 注释符号表 (=glossary-abbreviations=) :: 对注释符号进行解释
- 自然译文 (=translation-zh-natural=) :: 符合中文语法和习惯的自然译文
- 其他解释 (=notes-zh=) :: 其他相关的解释和注释

如下所示：
#+begin_src json
  {
      "id": 1,
      "koutei-yamagen": "男もすなる日記といふものを、女もしてみむとてするなり。",
      "translation-zh": "听说是男性所做的叫日记的东西，但想着女性也做着试试吧，便做了。",
      "phrase-gloss": [
          {
              "phrase": "男もすなる日記",
              "gloss-zh": "（传闻）男人也做的日记",
              "gloss-morph-zh": "男人=IFO 做-CCL HEV-ADN 日记",
              "words": [
                  {
                      "word": "男",
                      "gloss-zh": "男人",
                      "gloss-morph-zh": "男人"
                  },
                  {
                      "word": "も",
                      "gloss-zh": "也",
                      "gloss-morph-zh": "=IFO"
                  },
                  {
                      "word": "す",
                      "gloss-zh": "做",
                      "gloss-morph-zh": "做-CCL"
                  },
                  {
                      "word": "なる",
                      "gloss-zh": "传闻...的",
                      "gloss-morph-zh": "HEV-ADN"
                  },
                  {
                      "word": "日記",
                      "gloss-zh": "日记",
                      "gloss-morph-zh": "日记"
                  }
              ]
          },
          {
              "phrase": "といふものを",
              "gloss-zh": "所谓的东西（让步）",
              "gloss-morph-zh": "QUOT 说-ADN [物=ACC](=CON)",
              "words": [
                  {
                      "word": "と",
                      "gloss-zh": "（补语）",
                      "gloss-morph-zh": "=CMP"
                  },
                  {
                      "word": "いふ",
                      "gloss-zh": "所谓的",
                      "gloss-morph-zh": "说-ADN"
                  },
                  {
                      "word": "もの",
                      "gloss-zh": "东西",
                      "gloss-morph-zh": "东西"
                  },
                  {
                      "word": "を",
                      "gloss-zh": "（让步）",
                      "gloss-morph-zh": "=CON"
                  }
              ]
          },
          {
              "phrase": "女もしてみむとてするなり",
              "gloss-zh": "想着女人也做着试试吧，便做了",
              "gloss-morph-zh": "女人=IFO 做-ADV=SEQ 试-ADV+VOL-CCL=SCM 做-ADN COP-CCL",
              "words": [
                  {
                      "word": "女",
                      "gloss-zh": "女人",
                      "gloss-morph-zh": "女人"
                  },
                  {
                      "word": "も",
                      "gloss-zh": "也",
                      "gloss-morph-zh": "=IFO"
                  },
                  {
                      "word": "し",
                      "gloss-zh": "做",
                      "gloss-morph-zh": "做-ADV"
                  },
                  {
                      "word": "て",
                      "gloss-zh": "着",
                      "gloss-morph-zh": "=SEQ"
                  },
                  {
                      "word": "みむ",
                      "gloss-zh": "试试吧",
                      "gloss-morph-zh": "试-ADV+CJT"
                  },
                  {
                      "word": "とて",
                      "gloss-zh": "SCM",
                      "gloss-morph-zh": "=SCM"
                  },
                  {
                      "word": "する",
                      "gloss-zh": "做",
                      "gloss-morph-zh": "做-ADN"
                  },
                  {
                      "word": "なり",
                      "gloss-zh": "是",
                      "gloss-morph-zh": "COP-CCL"
                  }
              ]
          }
      ],
      "glossary-abbreviations": null,
      "translation-zh-natural": "虽说日记通常是用男人写的东西，但我想试着用作为女人来写写看，于是便写下了这本日记。"
  }
#+end_src
* 翻译的方针
** 复合词
尽量还原结构，如 *こころもとなし* 尽管是透明度比较低的复合词，在本项目中
还是作为
#+begin_example
  こころ+もと+なし => heart+root+none = 不安的
#+end_example
来处理。

此外，虽然很多复合词可以在辞典里被查到，但如果是透明度较高的复合词，则
在形态的标注上尽量不做处理。比如
#+begin_example
  もてく => もて く = hold SEQ come-CCL
#+end_example
** 文化特有的词汇
如，特色食物，节日，官职，地名，所谓的 proper name 类词语不翻译，使用
脚注灵活处理。
** 无标记
格、时态等若无语法标记，则不做明示化处理。
* 语法标注参考

- [[https://www.eva.mpg.de/lingua/resources/glossing-rules.php][Max Planck Institute for Evolutionary Anthropology, Department of
  Linguistics (2015). Leipzig Glossing Rules: Conventions for
  interlinear morpheme-by-morpheme glosses.]]
- [[https://researchmap.jp/mzisk/published_papers/42178558][Zisk, Matthew (2023). “Glossing Glosses: Methods for Transcribing
  and Glossing Japanese Kundoku Texts.” In Franck Cinato et
  al. (eds.), Glossing Practice: Comparative Perspectives,
  pp. 47–82. Lexington Books.]]
- [[https://researchmap.jp/mzisk/misc/47645778][ジスク マシュー (Zisk, Matthew) (2024). 古代日本語と現代日本語の機能
  形態素リスト (2024.09.10).]]
- [[https://michinorishimoji.github.io/searchgloss/][下地 理則 (Shimoji, Michinori) (2025). SearchGloss (Version
  1.0). DOI: 10.5281/zenodo.16419404.]]

  详细可查看 [[https://github.com/idiig/koten-gloss-table-zh][这个repo]]。
* 复现流程
** 克隆
#+begin_src shell
  git clone --recurse-submodules https://github.com/idiig/tosa-nikki-chinese-translation.git
#+end_src
** 开发环境
#+begin_src shell
  cd ./tosa-nikki-chinese-translation
  nix develop
#+end_src
** 基于submodule中的变更，更新翻译
源来自[[https://github.com/idiig/tosa-translation/tree/zh-translation][这个fork]]，如果需要更新源，可以使用
#+begin_src shell
  make update
#+end_src
详细可以查看如下：
*** 文件
#+begin_src makefile :noweb-ref path
  # Where to publish build results
  ARTIFACTS ?= artifacts
  # RAW source and outputs
  RAW        ?= tosa-translation/tosa.json
  INPUT_JSON ?= data/tosa-zh.json
  PARALLEL   ?= $(ARTIFACTS)/zh-jp-parallel-texts.json
  BYDAY      ?= $(ARTIFACTS)/zh-translation-by-day.json
#+end_src
*** 流程
**** 脚本
脚本位于 scripts 目录下，说明详见[[./scripts/README.org][scripts/README.org]]。
- extract_chinese_full.sh :: 从原始 JSON 提取并生成中译 JSON（结果为本 repo 的基础数据）
- extract_chinese_by_days.sh :: 将中译 JSON 按照日期拆分
- extract_parallel_texts.sh :: 从中译 JSON 提取中日对照文本
#+begin_src makefile :noweb-ref path
  # Scripts directory
  SCRIPTS_DIR ?= scripts
  SCRIPT_EXTRACT_FULL      ?= $(SCRIPTS_DIR)/extract_chinese_full.sh
  SCRIPT_EXTRACT_BY_DAYS   ?= $(SCRIPTS_DIR)/extract_chinese_by_days.sh
  SCRIPT_EXTRACT_PARALLEL  ?= $(SCRIPTS_DIR)/extract_parallel_texts.sh
#+end_src
**** 参数
无特殊需求可以不设置
#+begin_src makefile :noweb-ref params
  # Optional extra args for the three extractors
  FULL_ARGS    ?=
  BY_DAYS_ARGS ?=
  PAR_ARGS     ?=
#+end_src
**** Phony targets
#+begin_src makefile :noweb-ref phony
  update raw-full raw-by-days raw-parallel raw-all 
#+end_src
**** 输出完整结果
#+begin_src makefile :noweb-ref scripts
  raw-full: $(INPUT_JSON) ## Generate $(INPUT_JSON) from RAW
  $(INPUT_JSON): $(RAW) $(SCRIPT_EXTRACT_FULL) | dirs
  > $(TRACE) echo "[RAW→FULL] $(RAW) -> $@"; \
  > bash "$(SCRIPT_EXTRACT_FULL)" $(FULL_ARGS) "$(RAW)" "$@"
#+end_src
**** 输出按日拆分结果
#+begin_src makefile :noweb-ref scripts
  raw-by-days: $(BYDAY) ## Generate BYDAY from INPUT_JSON
  $(BYDAY): $(SCRIPT_EXTRACT_BY_DAYS) $(INPUT_JSON) | dirs
  > $(TRACE) echo "[RAW→BY-DAYS] $(INPUT_JSON) -> $@"; \
  > if [ -f "$(SCRIPT_EXTRACT_BY_DAYS)" ]; then \
  >   bash "$(SCRIPT_EXTRACT_BY_DAYS)" $(BY_DAYS_ARGS) "$(INPUT_JSON)" "$@"; \
  > else \
  >   echo "[ERROR] Day-split script not found: $(SCRIPT_EXTRACT_BY_DAYS)"; exit 1; \
  > fi
#+end_src
**** 输出中日对照文本
#+begin_src makefile :noweb-ref scripts
  raw-parallel: $(PARALLEL) ## Generate PARALLEL from tosa-zh.json/tosa.zh.json or $(INPUT_JSON)
  $(PARALLEL): $(SCRIPT_EXTRACT_PARALLEL) | dirs
  > $(TRACE) src="tosa-zh.json"; \
  > [ -f "$$src" ] || src="tosa.zh.json"; \
  > [ -f "$$src" ] || src="$(INPUT_JSON)"; \
  > echo "[RAW→PARALLEL] $$src -> $@"; \
  > bash "$(SCRIPT_EXTRACT_PARALLEL)" $(PAR_ARGS) "$$src" "$@"
#+end_src
**** 输出所有结果
#+begin_src makefile :noweb-ref scripts
  raw-all: raw-full raw-parallel raw-by-days ## Run all RAW → artifacts extractors
#+end_src
**** 更新
#+begin_src makefile :noweb-ref scripts
  update: ## Update submodules and regenerate artifacts from RAW
  > $(TRACE) echo "[UPDATE] git submodule update --recursive --remote"; \
  > git submodule update --recursive --remote
  > $(TRACE) mkdir -p "$(ARTIFACTS)" "$(dir $(INPUT_JSON))" "$(dir $(PARALLEL))" "$(dir $(BYDAY))"
  > $(TRACE) echo "[RUN] $(SCRIPT_EXTRACT_FULL) $(RAW) -> $(INPUT_JSON)"; \
  > bash "$(SCRIPT_EXTRACT_FULL)" $(FULL_ARGS) "$(RAW)" "$(INPUT_JSON)"
  > $(TRACE) src="tosa-zh.json"; [ -f "$$src" ] || src="tosa.zh.json"; [ -f "$$src" ] || src="$(INPUT_JSON)"; \
  > echo "[RUN] $(SCRIPT_EXTRACT_PARALLEL) $$src -> $(PARALLEL)"; \
  > bash "$(SCRIPT_EXTRACT_PARALLEL)" $(PAR_ARGS) "$$src" "$(PARALLEL)"
  > $(TRACE) echo "[RUN] $(SCRIPT_EXTRACT_BY_DAYS) $(INPUT_JSON) -> $(BYDAY)"; \
  > if [ -f "$(SCRIPT_EXTRACT_BY_DAYS)" ]; then \
  >   bash "$(SCRIPT_EXTRACT_BY_DAYS)" $(BY_DAYS_ARGS) "$(INPUT_JSON)" "$(BYDAY)"; \
  > else \
  >   echo "[ERROR] Day-split script not found: $(SCRIPT_EXTRACT_BY_DAYS)"; exit 1; \
  > fi
  > echo "[DONE] update pipeline finished"
#+end_src
** 基于 Zisk 的 glossing rule 生成 Glossary，自动注释
这一步分成2个步骤：
- 基于手工标注生成 glossary.json
#+begin_src shell
  make generate
#+end_src
- 手工修正 glossary.json 为 glossary.edited.json，因为使用了一部分不存
  在于 gloss 表的缩写
- 基于 glossary.edited.json 填充每个段落的 =glossary-abbreviations= 字段
#+begin_src shell
  make fill
#+end_src
详细内容可以查看如下：
*** 文件
#+begin_src makefile :noweb-ref path
  # Paths for annotated pipeline (glossary)
  INPUT    ?= data/tosa-zh.json
  ZISK     ?= $(shell nix build --no-link --print-out-paths .\#zisk-conventions)
  OUT      ?= build/glossary.json           # auto-generated global glossary
  FILLED   ?= build/out.json                # per-paragraph filled JSON
  EDITED   ?= data/glossary.edited.json     # user-edited glossary
  DST      ?= data/final/glossary.json      # staged final glossary
  # Prefer EDITED if it exists; otherwise use OUT (trim whitespace)
  GLOSSARY ?= $(if $(wildcard $(EDITED)),$(EDITED),$(OUT))
  GLOSSARY := $(strip $(GLOSSARY))
#+end_src
*** 流程
**** 脚本
脚本为独立的 flake apps，来自[[https://github.com/idiig/koten-gloss-table-zh][这个repo]]。
#+begin_src makefile :noweb-ref path
  # Commands (flake apps; escape '#' so make does not treat it as a comment)
  GEN  ?= nix run .\#generate-glossary --
  FILL ?= nix run .\#fill-glossary --
  # Load optional overrides
  -include .env
#+end_src
**** Phony targets
#+begin_src makefile :noweb-ref phony
  glossary fill stage activate publish publish-edited
#+end_src
**** Glossary 生成
#+begin_src makefile :noweb-ref scripts
  glossary: $(OUT) ## Generate global glossary to $(OUT)
  $(OUT): $(INPUT) $(ZISK) | dirs
  > $(TRACE) tmp="$$(mktemp)"; \
  >   echo "[GEN] $(INPUT) + $(ZISK) -> $@"; \
  >   $(GEN) "$(INPUT)" "$(ZISK)" > "$$tmp"; \
  >   mv -f "$$tmp" "$@"
#+end_src
**** Glossary 填充
#+begin_src makefile :noweb-ref scripts
  fill: $(FILLED) ## Fill per-paragraph glossary-abbreviations using $(GLOSSARY)
  $(FILLED): $(INPUT) $(GLOSSARY) | dirs
  > $(TRACE) tmp="$$(mktemp)"; \
  >   echo "[FILL] $(INPUT) + $(GLOSSARY) -> $@"; \
  >   if [ ! -f "$(GLOSSARY)" ]; then echo "[ERROR] Glossary not found: $(GLOSSARY)"; exit 1; fi; \
  >   $(FILL) "$(INPUT)" "$(GLOSSARY)" > "$$tmp"; \
  >   mv -f "$$tmp" "$@"
#+end_src
**** 确认状态
#+begin_src makefile :noweb-ref scripts
  stage: ## Copy edited glossary to $(DST)
  > $(TRACE) test -f "$(EDITED)"
  > $(TRACE) mkdir -p "$(dir $(DST))"
  > $(TRACE) cp -f "$(EDITED)" "$(DST)"
  > echo "[STAGE] $(EDITED) -> $(DST)"
#+end_src
**** 激活修改词表
#+begin_src makefile :noweb-ref scripts
  activate: ## Symlink build/glossary.active.json -> EDITED
  > $(TRACE) mkdir -p build
  > $(TRACE) ln -sfn "$(abspath $(EDITED))" build/glossary.active.json
  > echo "[ACTIVATE] build/glossary.active.json -> $(EDITED)"
#+end_src
**** 输出结果
#+begin_src makefile :noweb-ref scripts
  publish: glossary fill ## Copy auto-generated results into artifacts/
  > $(TRACE) mkdir -p "$(ARTIFACTS)"
  > install -m 0644 "$(OUT)"    "$(ARTIFACTS)/glossary.json"
  > install -m 0644 "$(FILLED)" "$(ARTIFACTS)/out.json"
  > echo "[PUBLISH] $(OUT) -> $(ARTIFACTS)/glossary.json"
  > echo "[PUBLISH] $(FILLED) -> $(ARTIFACTS)/out.json"
  publish-edited: ## Copy your edited glossary into artifacts/
  > $(TRACE) mkdir -p "$(ARTIFACTS)"
  > $(TRACE) test -f "$(EDITED)" || { echo "[ERROR] EDITED not found: $(EDITED)"; exit 1; }
  > install -m 0644 "$(EDITED)" "$(ARTIFACTS)/glossary.json"
  > echo "[PUBLISH] $(EDITED) -> $(ARTIFACTS)/glossary.json"
#+end_src
** Makefile
Makefile 管理流程，使用 GNU make 4.x+ 编写。整体可见[[./Makefile][Makefile]]。
*** 一般设置
#+begin_src makefile :noweb-ref general
  # Use bash with strict flags for all recipes
  SHELL := /usr/bin/env bash
  .SHELLFLAGS := -euo pipefail -c

  # Use a custom recipe prefix to avoid TAB requirements (GNU make 4.x+)
  .RECIPEPREFIX := >

  # Debug (set DEBUG=1 to enable command tracing)
  DEBUG ?= 0
  ifeq ($(DEBUG),1)
    TRACE := set -x;
  else
    TRACE :=
  endif
#+end_src
*** 文件系统 helper
**** Phony targets
#+begin_src makefile :noweb-ref phony
  dirs
#+end_src
**** body
#+begin_src makefile :noweb-ref scripts
  dirs: ## Create output directories
  > $(TRACE) mkdir -p $(dir $(OUT)) $(dir $(FILLED)) $(dir $(DST)) "$(ARTIFACTS)"
#+end_src
*** help
**** Phony targets
#+begin_src makefile :noweb-ref phony
  help
#+end_src
**** body
#+begin_src makefile :noweb-ref scripts
  help: ## Show help
  > awk 'BEGIN{FS=":.*##"; printf "\nTargets:\n"} /^[a-zA-Z0-9_.-]+:.*##/{printf "  \033[1m%-18s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
#+end_src
*** Entry point
#+begin_src makefile :noweb yes :tangle ./Makefile
  # Makefile
  <<general>>

  <<path>>

  <<params>>

  .PHONY: <<phony>>

  <<scripts>>
#+end_src
* TODO TODO List
- [ ] ===, =+=, =-= 的使用
- [ ] 词表的生成
